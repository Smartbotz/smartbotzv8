
import MakeWASocket, { ConnectionState, fetchLatestBaileysVersion, makeInMemoryStore, useSingleFileAuthState, MessageRetryMap, DisconnectReason } from '@adiwajshing/baileys'
import LOGGER from '@adiwajshing/baileys/lib/Utils/logger'
import { Boom } from '@hapi/boom'
import { printTable } from './Utils/frontend'
import { SocketClient } from './lib/socket'
import { handler } from './middleware/index'
import fs, { mkdirSync } from 'fs'
import ts from 'typescript'
import path from 'path'
import syntaxError from 'syntax-error'
declare global {
  interface Window {
    jamal: SocketClient
    cmd: { [key: string]: any }
    db: { [key: string]: any }
    reload: (ev: any, fileName: string) => void
  }
}
// authState is a singleton that is shared between all instances of the socket
// logger is a singleton that is shared between all instances of the socket
const MSG_LOGGER = LOGGER.child({})
MSG_LOGGER.level = process.argv.includes('--dev') ? 'trace' : 'silent'
const msgRetryCount: MessageRetryMap = {}
// check dir exists
if (!fs.existsSync('storage')) mkdirSync('storage')
const memo = makeInMemoryStore({ logger: MSG_LOGGER })
memo.readFromFile('storage/memo.json')
setInterval(() => {
    memo.writeToFile('storage/memo.json')
}, 10_000)

const Socket = async (): Promise<void> => {
  const { version, isLatest } = await fetchLatestBaileysVersion()
  const { saveState, state } = useSingleFileAuthState('storage/authState.json', MSG_LOGGER)

  const jamal = new SocketClient(
    MakeWASocket({
      auth: state,
      logger: MSG_LOGGER,
      msgRetryCounterMap: msgRetryCount,
      treatCiphertextMessagesAsReal: true,
      printQRInTerminal: true,
      version: version,
      getMessage: async (key) => {
        return {
          conversation: '',
        }
      },
    }),
    memo
  )

  console.log(printTable(isLatest, version))
  memo.bind(jamal.socket.ev)
  jamal.socket.ev.on('connection.update', connectionUpdate)
  jamal.socket.ev.on('messages.upsert', (m) => handler(m, jamal))
  jamal.socket.ev.on('creds.update', saveState)
  global.cmd = {}
  const commandFile = path.join(__dirname, 'command')
  const commandFilter = (file: string) => /\.ts$/.test(file)
  for (let file of fs.readdirSync(commandFile).filter(commandFilter)) {
    try {
      global.cmd[file] = await import(path.join(commandFile, file))
    } catch (e) {
      delete global.cmd[file]
    }
  }
  global.reload = async (_ev: any, fileName: string) => {
    if (commandFilter(fileName)) {
      const direct = path.join(commandFile, fileName)
      if (direct in require.cache) {
        delete require.cache[direct]
        if (fs.existsSync(direct)) jamal.logger.info(`reload ${fileName}`)
        else {
          jamal.logger.info(`delete ${fileName}`)
          return delete global.cmd[fileName]
        }
      } else jamal.logger.info(`${fileName} not in cache`)
      let error = syntaxError(ts.transpile(fs.readFileSync(direct).toString('utf-8'), { fileName: direct }), fileName)
      if (error) jamal.logger.warn(`${fileName} syntax error:`, error)
      else
        try {
          global.cmd[fileName] = await import(direct)
        } catch (e) {
          jamal.logger.warn(`${fileName} error:`, e)
        } finally {
          global.cmd = Object.fromEntries(Object.entries(global.cmd).sort(([a], [b]) => a.localeCompare(b)))
        }
    }
  }
  function connectionUpdate(ev: Partial<ConnectionState>): void {
    const { lastDisconnect, connection } = ev
    if (connection == 'close') {
      if ((lastDisconnect.error as Boom)?.output?.statusCode !== DisconnectReason.loggedOut) {
        console.log(`Disconnected: ${lastDisconnect.error.message}`)
        console.log(`Restarting in ${lastDisconnect.error.name}`)
        Socket()
          .then(() => console.log('Restarted'))
          .catch(console.error)
      } else {
        console.log(`Disconnected: ${lastDisconnect.error.message}`)
      }
    }
    console.log('|------------------------------------------------------|\n| STATUS CONNECTION: ', ev, '\n|------------------------------------------------------|\n')
  }

  Object.freeze(global.cmd)
  fs.watch(path.join(__dirname, 'command'), await global.reload)
}
Socket()
  .catch((e) => console.error(e))
  .then(() => console.log('SOCKET LOADED'))
