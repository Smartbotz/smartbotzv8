import yts from 'yt-search'
import axios from 'axios'
import fetch, { Body } from 'node-fetch'
import cheerio from 'cheerio'
import formdata from 'form-data'
import { undoFormatedSize } from '../../Utils'
type Itype = 'mp4' | 'mp3'
const form = new formdata()
interface youtubeParse {
  url: string
  title: string
  duration: string
  thumbnail: string
  medias: {
    url: string
    quality: string
    extension: string
    size: number
    formattedSize: string
  }[]
}
export class Youtube {
  static async search(query: string): Promise<yts.SearchResult> {
    return new Promise(async (resolve, reject) => {
      const data = await yts(query)
      resolve(data)
    })
  }
  static async getUrlDownload(url: string): Promise<youtubeParse> {
    return new Promise(async (resolve, reject) => {
      const html = await axios.get('https://downvideo.quora-wiki.com/tiktok-video-downloader#url=' + url)
      const $ = cheerio.load(html.data)
      const token = $('#token').attr('value')
      form.append('url', url)
      form.append('token', token)
      const data = await fetch('https://downvideo.quora-wiki.com/system/action.php', {
        method: 'POST',
        body: form,
        headers: {
          Cookie: 'fpestid=N-NFBb48WFH1mPQZecUc2Q9_jaYVEBXTIUGihxu3Y-IMt2x73fD8rfJVGtgf_EocY6SSiQ; __gads=ID=30ab1aeee76ddf81-22a80ed95cd20056:T=1650467795:RT=1650467795:S=ALNI_MaRwGYVfTZzcJ_NqLu_can9yH-OtQ; PHPSESSID=akcq346g6a0ptkv8nlhe64f1ji',
          'Content-Type': 'multipart/form-data; boundary=' + form.getBoundary(),
          'Content-Length': form.getLengthSync().toString(),
        },
      })
      if (data.status === 200) {
        resolve(await data.json())
      } else {
        reject(data.status)
      }
    })
  }

  static async getUrlDownload2(url: string, format: { ext?: 'mp4' | 'mp3'; quality?: '1080' | '720' | '480' | '360' | '240p' | '144p' | '128' } = {}): Promise<any> {
    return new Promise(async (resolve, reject) => {
      if (!format.quality) format.quality = '360'
      if (!format.ext) format.ext = 'mp4'
      if (format.ext === 'mp3') format.quality = '128'
      const form = new formdata()
      form.append('url', url)
      form.append('q_auto', 0)
      form.append('ajax', 1)
      const yt2mate = await fetch('https://www.y2mate.com/mates/en327/analyze/ajax', {
        method: 'POST',
        body: form,
      })
      if (yt2mate.status === 200) {
        const yjson = await yt2mate.json()
        const $ = cheerio.load(yjson.result)
        const formdate = new formdata()
        const _data = $('script:nth-child(3)').html()
        formdate.append(
          '_id',
          _data
            .split(/var k__id = /)[1]
            .split(';')[0]
            .replace(/[\"\']/gi, '')
        )
        formdate.append(
          'v_id',
          _data
            .split(/var k_data_vid = /)[1]
            .split(';')[0]
            .replace(/[\"\']/gi, '')
        )
        formdate.append('token', '')
        formdate.append('ajax', 1)
        formdate.append('ftype', format.ext)
        formdate.append('fquality', format.quality)
        fetch('https://www.y2mate.com/mates/convert', {
          method: 'POST',
          body: formdate,
        })
          .then(async (res) => {
            const pepek = []
            const data = await res.json()
            $(`#${format.ext} > table > tbody > tr`).each((i, el) => {
              const _url = $(el).find('td > a').text()
              if (!_url.includes(format.quality)) return
              pepek.push($(el).find('td:nth-child(2)').text())
            })
            const $$ = cheerio.load(data.result)
            resolve({
              url: $$('a').attr('href'),
              title: $('b').text(),
              fileSize: pepek[0],
              thumbnail: $('img').attr('src'),
              quality: format.quality,
              formattedSize: undoFormatedSize(pepek[0]),
              type: format.ext,
            })
          })
          .catch((err) => {
            reject(err)
          })
      } else {
        reject(yt2mate.status)
      }
    })
  }
  static async process(url: string, isAudio: string): Promise<{ url: string; title: string; thumbnail: string; fileSize: string; type: Itype; quality: string; formattedSize: string }> {
    return new Promise(async (resolve, reject) => {
      let data: { url: string; title: string; thumbnail: string; fileSize: string; type: Itype; quality: string; formattedSize: string }
      try {
        if (isAudio == 'mp3') return resolve(await this.getUrlDownload2(url, { ext: 'mp3' }))
        await this.getUrlDownload2(url, { ext: 'mp4', quality: '480' })
          .then(async (res) => {
            resolve(res)
          })
          .catch(async () => {
            await this.getUrlDownload2(url, { ext: 'mp4', quality: '720' })
              .then(async (res) => {
                resolve(res)
              })
              .catch(async () => {
                await this.getUrlDownload2(url, { ext: 'mp4', quality: '360' })
                  .then(async (res) => {
                    resolve(res)
                  })
                  .catch(async () => {
                    await this.getUrlDownload2(url, { ext: 'mp4', quality: '240p' })
                      .then(async (res) => {
                        resolve
                      })
                      .catch(async () => {
                        await this.getUrlDownload2(url, { ext: 'mp4', quality: '144p' }).then(async (res) => {
                          resolve(res)
                        })
                      })
                  })
              })
          })
      } catch (err) {
        reject(err)
      }
    })
  }
}
