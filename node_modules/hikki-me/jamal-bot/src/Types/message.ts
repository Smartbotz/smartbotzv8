import { proto, Contact } from '@adiwajshing/baileys'
import KeyedDB from '@adiwajshing/keyed-db'
export type IMessage = ICMessage
export interface ICMessage {
  type: string
  name: string
  chat: string
  command: string
  mention: string[]
  sender: { name: string; id: string }
  text: string
  key: proto.IMessageKey
  isMedia: boolean
  caption?: string
  selectedButtonId?: string
  contextInfo?: proto.IContextInfo
  firstScanLength?: number | Long
  scanLengths?: String[]
  url?: string
  mimetype?: string
  fileSha256?: [Uint8Array]
  fileLength?: [Long]
  height?: number
  width?: number
  mediaKey?: [Uint8Array]
  fileEncSha256?: [Uint8Array]
  directPath?: string
  mediaKeyTimestamp?: [Long]
  jpegThumbnail?: [Uint8Array]
  scansSidecar?: [Uint8Array]
  isGroup: boolean
  isQuoted: boolean
  isBaileys: boolean
  react: (emoji: string) => Promise<proto.WebMessageInfo>
  delete: () => Promise<proto.WebMessageInfo>
  download: () => Promise<Buffer>
  reply: (text: string | Buffer | any) => Promise<void | proto.WebMessageInfo>
  quoted: {
    msg: proto.IWebMessageInfo
    copast: () => Promise<string>
    message?: proto.IMessage
    getQuoted?: () => proto.IWebMessageInfo
    getMessage?: () => proto.IWebMessageInfo
    mention: string[]
    sender: { name: string; id: string }
    isMedia: boolean
    type: string
    chat: proto.IChat
    name: string
    id: string
    download: () => Promise<Buffer>
    delete: () => Promise<proto.IWebMessageInfo>
    react: (emoji: string) => Promise<proto.IWebMessageInfo>
    caption?: string
    contextInfo?: proto.IContextInfo
    firstScanLength?: number | Long
    scanLengths?: String[]
    url?: string
    mimetype?: string
    key?: proto.IMessageKey
    fileSha256?: [Uint8Array]
    fileLength?: [Long]
    height?: number
    text?: string
    width?: number
    mediaKey?: [Uint8Array]
    fileEncSha256?: [Uint8Array]
    directPath?: string
    mediaKeyTimestamp?: [Long]
    jpegThumbnail?: [Uint8Array]
    scansSidecar?: [Uint8Array]
    isGroup: boolean
    isQuoted: boolean
    isBaileys: boolean
  } | null
}
export declare interface ImakeInMemoryStore {
  chats: KeyedDB<proto.Chat, string>
  contacts: {
    [_: string]: Contact
  }
  messages: {
    [_: string]: {
      array: proto.IWebMessageInfo[]
      get: (id: string) => proto.IWebMessageInfo
      upsert: (item: proto.IWebMessageInfo, mode: 'append' | 'prepend') => void
      update: (item: proto.IWebMessageInfo) => boolean
      remove: (item: proto.IWebMessageInfo) => boolean
      updateAssign: (id: string, update: Partial<proto.IWebMessageInfo>) => boolean
      clear: () => void
      filter: (contain: (item: proto.IWebMessageInfo) => boolean) => void
      toJSON: () => proto.IWebMessageInfo[]
      fromJSON: (newItems: proto.IWebMessageInfo[]) => void
    }
  }
}
