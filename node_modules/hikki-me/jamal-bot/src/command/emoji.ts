import { proto } from '@adiwajshing/baileys'
import fetch from 'node-fetch'
import { config } from '../lib/config'
import { ICommand, IMessage } from '../Types'
import { makeSticker } from '../Utils'

export let handler: ICommand = async (m: IMessage, { args }): Promise<any | proto.IWebMessageInfo> => {
  if (args.length < 1) return m.reply('Usage: `p <url>`')
  let emoji: string
  let emoji2: string
  let text = args.join(' ')
  if (text.includes('&')) {
    emoji = text.split('&')[0]
    emoji2 = text.split('&')[1]
  } else if (text.includes('|')) {
    emoji = text.split('|')[0]
    emoji2 = text.split('|')[1]
  } else if (text.includes('+')) {
    emoji = text.split('+')[0]
    emoji2 = text.split('+')[1]
  } else if (text.includes('-')) {
    emoji = text.split('-')[0]
    emoji2 = text.split('-')[1]
  } else if (text.includes('_')) {
    emoji = text.split('_')[0]
    emoji2 = text.split('_')[1]
  } else if (text.includes(' ')) {
    emoji = text.split(' ')[0]
    emoji2 = text.split(' ')[1]
  }
  if (!emoji) return m.reply('Format salah!\nContoh: `emojimix <emoji> <emoji2>`')
  fetch(`https://tenor.googleapis.com/v2/featured?key=AIzaSyAyimkuYQYF_FXVALexPuGQctUWRURdCYQ&contentfilter=high&media_filter=png_transparent&component=proactive&collection=emoji_kitchen_v5&q=${encodeURI(emoji)}_${encodeURI(emoji2)}`)
    .then((res) => res.json())
    .then(async (res) => {
      if (res.locale == '') {
        fetch(`https://tenor.googleapis.com/v2/featured?key=AIzaSyAyimkuYQYF_FXVALexPuGQctUWRURdCYQ&contentfilter=high&media_filter=png_transparent&component=proactive&collection=emoji_kitchen_v5&q=${encodeURI(emoji2)}_${encodeURI(emoji)}`)
          .then((res) => res.json())
          .then(async (res) => {
            if (res.locale == '') {
              m.reply('Emoji tidak ditemukan!')
              m.react('‚ùå')
            } else {
              m.reply(await makeSticker(res.results[0].url, { pack: config.packSticker, author: config.authorSticker }))
            }
          })
      } else {
        m.reply(await makeSticker(res.results[0].url, { pack: config.packSticker, author: config.authorSticker }))
      }
    })
}
handler.tags = ['fun']
handler.help = ['emojimix', 'semoji', 'mixemoji']
handler.command = /^(emojimix|semoji|mixemoji)$/
