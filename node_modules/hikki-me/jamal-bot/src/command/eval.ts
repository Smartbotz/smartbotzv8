import { ICommand, IExtra, IMessage } from '../Types'
import ts from 'typescript'
import util from 'util'
import { exec } from 'child_process'
export let handler: ICommand = async (m: IMessage, { jamal }: IExtra) => {
  jamal
  if (m.text.startsWith('=>')) {
    function _(v: any) {
      m.reply(util.format(v))
    }
    const codePromise = m.text.includes('await')
      ? `(async () => {
           ${m.text.replace('=>', '')}
       })().then(res => res).catch(err => err)`
      : m.text.replace('=>', '')
    const code = ts.transpile(codePromise)
    const result = await eval(code)
    await m.reply(util.format(result))
  }
  if (m.text.startsWith('$')) {
    const code = m.text.replace('$', '')
    exec(code, (err, stdout, stderr) => {
      if (err) return m.reply(stderr)
      m.reply(stdout)
    })
  }
}
handler.tags = ['eval']
handler.customPrefix = /^(=>|<|[$]) /
handler.command = /^(:?)/i
handler.isOwner = true
handler.help = ['=>']
