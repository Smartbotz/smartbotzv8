import { ICommand, IMessage } from '../Types'
import os from 'os'

export let handler: ICommand = async (m: IMessage, { command, jamal }) => {
  const dte = process.uptime()
  const uptime = Math.floor(dte / 3600) + ' hours ' + Math.floor(dte / 60) + ' minutes ' + Math.floor(dte % 60) + ' seconds'
  const memory = process.memoryUsage()
  const memoryUsage = Math.round((memory.heapUsed / 1024 / 1024) * 100) / 100 + ' MB'
  const cpuUsage = Math.round((process.cpuUsage().user / 1024 / 1024) * 100) / 100 + ' MB'
  const cpuCount = os.cpus().length
  const cpuModel = os.cpus()[0].model
  const cpuSpeed = os.cpus()[0].speed
  const cpuLoad = os.loadavg()
  const cpuLoad1 = cpuLoad[0]
  const cpuLoad5 = cpuLoad[1]
  const cpuLoad15 = cpuLoad[2]
  const cpuFree = os.freemem()
  const cpuTotal = os.totalmem()
  const cpuFreePercent = Math.round((cpuFree / cpuTotal) * 100)
  const cpuUsedPercent = 100 - cpuFreePercent
  const cpuFreeMB = Math.round((cpuFree / 1024 / 1024) * 100) / 100
  const cpuTotalMB = Math.round((cpuTotal / 1024 / 1024) * 100) / 100
  m.reply(`
Uptime: ${uptime}
Memory Usage: ${memoryUsage}
CPU Usage: ${cpuUsage}
CPU Count: ${cpuCount}
CPU Model: ${cpuModel}
CPU Speed: ${cpuSpeed}
CPU Load: ${cpuLoad1} ${cpuLoad5} ${cpuLoad15}
CPU Free: ${cpuFreePercent}%
CPU Used: ${cpuUsedPercent}%
CPU Free: ${cpuFreeMB} MB
CPU Total: ${cpuTotalMB} MB
    `)
}
handler.tags = ['status']
handler.help = ['runtime']
handler.command = /^(runtime|run|timerun)$/i
