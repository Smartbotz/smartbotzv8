import { ICommand, IMessage } from '../Types'

export let handler: ICommand = async (m: IMessage, { jamal, command }): Promise<any> => {
  if ((m.mention.length === 0 || m.quoted == null) && !m.isGroup) return m.reply('please mention the user you want to remov')
  try {
    switch (command) {
      case 'kick':
      case 'remove':
        jamal.socket.groupParticipantsUpdate(m.chat, m.mention.length !== 0 ? m.mention : [m.quoted.sender.id], command == 'kick' ? 'remove' : 'remove')
        m.reply(`Sukses ${command} partisipan dari chat ${m.chat}`)
        break
      case 'add':
        const pak = await jamal.socket.groupParticipantsUpdate(m.chat, m.mention.length !== 0 ? m.mention : [m.quoted.sender.id], 'add')
        m.reply(`Sukses ${command} partisipan dari chat ${m.chat}, Jika Belum Di Add, Nomor Bersifat Private`)
        break
      case 'promote':
        jamal.socket.groupParticipantsUpdate(m.chat, m.mention.length !== 0 ? m.mention : [m.quoted.sender.id], 'promote')
        m.reply(`Sukses ${command} partisipan dari chat ${m.chat}`)
        break
      case 'demote':
        jamal.socket.groupParticipantsUpdate(m.chat, m.mention.length !== 0 ? m.mention : [m.quoted.sender.id], 'demote')
        m.reply(`Sukses ${command} partisipan dari chat ${m.chat}`)
        break
    }
  } catch (e) {
    m.reply(`Error: ${e}`)
  }
}
handler.tags = ['admin']
handler.isAdmin = true
handler.isGroup = true
handler.isBotAdmin = true
handler.command = /^(kick|remove|add|promote|demote)$/i
handler.help = ['kick', 'remove', 'add', 'promote', 'demote'].map((x) => `${x} <user>`)
