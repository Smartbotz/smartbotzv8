import { writeFileSync } from 'fs'
import { uploadFile } from '../lib/api/uploadFile'
import { config } from '../lib/config'
import { ICommand, IMessage } from '../Types'
import { generatePath, makeSticker, toBuffer, webpToGif } from '../Utils'

export let handler: ICommand = async (m: IMessage, { args, jamal }): Promise<void | any> => {
  try {
    const prepare = m?.isMedia ? await m.download() : m.quoted?.isMedia ? await m.quoted.download() : null
    if (!prepare) return m.reply('reply sebuah sticker atau gambar.')
    if (args.length < 1) return m.reply('Usage: `p <url>`')
    let emoji: string
    let emoji2: string
    let text = args.join(' ')
    if (text.includes('&')) {
      emoji = text.split('&')[0]
      emoji2 = text.split('&')[1]
    } else if (text.includes('|')) {
      emoji = text.split('|')[0]
      emoji2 = text.split('|')[1]
    } else if (text.includes('+')) {
      emoji = text.split('+')[0]
      emoji2 = text.split('+')[1]
    } else if (text.includes('-')) {
      emoji = text.split('-')[0]
      emoji2 = text.split('-')[1]
    } else {
      emoji = text
      emoji2 = '_'
    }
    const { buffer, mime } = await toBuffer(prepare)
    switch (mime) {
      case 'image/webp':
        const path = generatePath('webp')
        writeFileSync(path, prepare)
        const gif = await webpToGif(path)
        try {
          let out = 'https://api.memegen.link/images/custom/' + encodeURI(emoji2) + '/' + encodeURI(emoji) + '.gif?background=' + gif.file
          m.reply(await makeSticker(out, { pack: config.packSticker, author: config.authorSticker }))
        } catch {
          let out = 'https://api.memegen.link/images/custom/' + encodeURI(emoji2) + '/' + encodeURI(emoji) + '.webp?background=' + gif.file
          m.reply(await makeSticker(out, { pack: config.packSticker, author: config.authorSticker }))
        }
        break
      case 'image/gif':
        const pat2h = generatePath('gif')
        writeFileSync(pat2h, prepare)
        const isgif = await uploadFile(pat2h)
        let out2 = 'https://api.memegen.link/images/custom/' + encodeURI(emoji2) + '/' + encodeURI(emoji) + '.gif?background=' + isgif.url
        m.reply(await makeSticker(out2, { pack: config.packSticker, author: config.authorSticker }))
        break
      case 'image/png':
      case 'image/jpeg':
        const path2 = generatePath(mime.split('/')[1])
        writeFileSync(path2, prepare)
        const isMek = await uploadFile(path2)
        let out3 = 'https://api.memegen.link/images/custom/' + encodeURI(emoji2) + '/' + encodeURI(emoji) + '.' + mime.split[1] + '?background=' + isMek.url
        m.reply(await makeSticker(out3, { pack: config.packSticker, author: config.authorSticker }))
        break
      default:
        m.reply('media ini belum support.')
        break
    }
  } catch (e) {
    m.reply('error: ' + e)
  }
}
handler.tags = ['creator']
handler.command = /^(smeme|stickermeme|stickerme)$/i
handler.help = ['smeme <image>', 'smeme <gif>', 'smeme <webp>']
