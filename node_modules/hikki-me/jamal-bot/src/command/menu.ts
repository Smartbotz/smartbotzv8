import { ICommand, IMessage } from '../Types'
import pkg from '../../package.json'
import { readFileSync } from 'fs'
interface IParseMenu {
  cmd: string[]
  tags: string
}
export let handler: ICommand = async (m: IMessage, { jamal, prefix }) => {
  const dir = Object.keys(global.cmd)
  let menu: string = ''
  let konsole: IParseMenu[] = []
  menu += '*Jamal Bot First Version*\n'
  menu += 'language: *typescript*\n'
  menu += `version: *${pkg.version}*\n`
  menu += `author: *${pkg.author}*\n`
  menu += `source: *${pkg.repository.url}*\n`
  for (let i = 0; i < dir.length; i++) {
    Object.values(global.cmd[dir[i]])
      .filter((cmd: ICommand) => !cmd.disabled && !cmd.isEvent)
      .map((cmd: ICommand) => {
        konsole.push({
          cmd: cmd.help,
          tags: cmd.tags[0],
        } as IParseMenu)
      })
  }
  let mek = konsole.map((meky) => meky.tags)
  let urutkan = mek.sort()
  let urutkanlah = [...new Set(urutkan)]
  menu += '\n'
  for (let i of urutkanlah) {
    if (i == 'menu') continue
    menu += `*-----( ${i} )-----*\n`
    menu += '\n'
    let filter = konsole.filter((filter) => filter.tags == i)
    let mep2 = filter.map((mep) => mep.cmd)
    const help = []
    for (let x of mep2) {
      for (let y of x) {
        help.push(y)
      }
    }
    const sort = help.sort(function (a, b) {
      return a.length - b.length
    })
    for (let i of sort) {
      menu += `> ${prefix}${i}\n`
    }
    // space
    menu += '\n'
  }
  menu += '\n\n*( J A M A L  B O T )*\n'
  let footer = '@hardianto02_'
  jamal.sendTWithUrlButton(m.chat, true, menu, footer, ['Website(maintance)', 'https://hardianto.xyz'], null, readFileSync('./component/componen.mp4'))
}
handler.tags = ['menu']
handler.command = /^(help|menu)$/i
handler.help = ['menu', 'help']
